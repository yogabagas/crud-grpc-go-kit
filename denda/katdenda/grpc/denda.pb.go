// Code generated by protoc-gen-go. DO NOT EDIT.
// source: denda.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	denda.proto

It has these top-level messages:
	AddDendaReq
	ReadDendaByIDReq
	ReadDendaByIDResp
	ReadDendaResp
	ReadDendaByKeteranganReq
	ReadDendaByKeteranganResp
	UpdateDendaReq
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// step 3
type AddDendaReq struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Jenis     string `protobuf:"bytes,2,opt,name=Jenis" json:"Jenis,omitempty"`
	Jumlah    string `protobuf:"bytes,3,opt,name=Jumlah" json:"Jumlah,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	CreatedBy string `protobuf:"bytes,5,opt,name=CreatedBy" json:"CreatedBy,omitempty"`
}

func (m *AddDendaReq) Reset()                    { *m = AddDendaReq{} }
func (m *AddDendaReq) String() string            { return proto.CompactTextString(m) }
func (*AddDendaReq) ProtoMessage()               {}
func (*AddDendaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDendaReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AddDendaReq) GetJenis() string {
	if m != nil {
		return m.Jenis
	}
	return ""
}

func (m *AddDendaReq) GetJumlah() string {
	if m != nil {
		return m.Jumlah
	}
	return ""
}

func (m *AddDendaReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AddDendaReq) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type ReadDendaByIDReq struct {
	ID string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *ReadDendaByIDReq) Reset()                    { *m = ReadDendaByIDReq{} }
func (m *ReadDendaByIDReq) String() string            { return proto.CompactTextString(m) }
func (*ReadDendaByIDReq) ProtoMessage()               {}
func (*ReadDendaByIDReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadDendaByIDReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type ReadDendaByIDResp struct {
	ID         string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Jenis      string `protobuf:"bytes,2,opt,name=Jenis" json:"Jenis,omitempty"`
	Jumlah     string `protobuf:"bytes,3,opt,name=Jumlah" json:"Jumlah,omitempty"`
	Status     int32  `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	Keterangan string `protobuf:"bytes,5,opt,name=Keterangan" json:"Keterangan,omitempty"`
	CreatedBy  string `protobuf:"bytes,6,opt,name=CreatedBy" json:"CreatedBy,omitempty"`
}

func (m *ReadDendaByIDResp) Reset()                    { *m = ReadDendaByIDResp{} }
func (m *ReadDendaByIDResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDendaByIDResp) ProtoMessage()               {}
func (*ReadDendaByIDResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadDendaByIDResp) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ReadDendaByIDResp) GetJenis() string {
	if m != nil {
		return m.Jenis
	}
	return ""
}

func (m *ReadDendaByIDResp) GetJumlah() string {
	if m != nil {
		return m.Jumlah
	}
	return ""
}

func (m *ReadDendaByIDResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ReadDendaByIDResp) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

func (m *ReadDendaByIDResp) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

type ReadDendaResp struct {
	AllDenda []*ReadDendaByIDResp `protobuf:"bytes,1,rep,name=allDenda" json:"allDenda,omitempty"`
}

func (m *ReadDendaResp) Reset()                    { *m = ReadDendaResp{} }
func (m *ReadDendaResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDendaResp) ProtoMessage()               {}
func (*ReadDendaResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadDendaResp) GetAllDenda() []*ReadDendaByIDResp {
	if m != nil {
		return m.AllDenda
	}
	return nil
}

type ReadDendaByKeteranganReq struct {
	Keterangan string `protobuf:"bytes,1,opt,name=Keterangan" json:"Keterangan,omitempty"`
}

func (m *ReadDendaByKeteranganReq) Reset()                    { *m = ReadDendaByKeteranganReq{} }
func (m *ReadDendaByKeteranganReq) String() string            { return proto.CompactTextString(m) }
func (*ReadDendaByKeteranganReq) ProtoMessage()               {}
func (*ReadDendaByKeteranganReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadDendaByKeteranganReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadDendaByKeteranganResp struct {
	KetDenda []*ReadDendaByIDResp `protobuf:"bytes,1,rep,name=ketDenda" json:"ketDenda,omitempty"`
}

func (m *ReadDendaByKeteranganResp) Reset()                    { *m = ReadDendaByKeteranganResp{} }
func (m *ReadDendaByKeteranganResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDendaByKeteranganResp) ProtoMessage()               {}
func (*ReadDendaByKeteranganResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadDendaByKeteranganResp) GetKetDenda() []*ReadDendaByIDResp {
	if m != nil {
		return m.KetDenda
	}
	return nil
}

type UpdateDendaReq struct {
	ID        string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Jenis     string `protobuf:"bytes,2,opt,name=Jenis" json:"Jenis,omitempty"`
	Jumlah    string `protobuf:"bytes,3,opt,name=Jumlah" json:"Jumlah,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=Status" json:"Status,omitempty"`
	UpdatedBy string `protobuf:"bytes,5,opt,name=UpdatedBy" json:"UpdatedBy,omitempty"`
}

func (m *UpdateDendaReq) Reset()                    { *m = UpdateDendaReq{} }
func (m *UpdateDendaReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDendaReq) ProtoMessage()               {}
func (*UpdateDendaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateDendaReq) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateDendaReq) GetJenis() string {
	if m != nil {
		return m.Jenis
	}
	return ""
}

func (m *UpdateDendaReq) GetJumlah() string {
	if m != nil {
		return m.Jumlah
	}
	return ""
}

func (m *UpdateDendaReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateDendaReq) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

func init() {
	proto.RegisterType((*AddDendaReq)(nil), "grpc.AddDendaReq")
	proto.RegisterType((*ReadDendaByIDReq)(nil), "grpc.ReadDendaByIDReq")
	proto.RegisterType((*ReadDendaByIDResp)(nil), "grpc.ReadDendaByIDResp")
	proto.RegisterType((*ReadDendaResp)(nil), "grpc.ReadDendaResp")
	proto.RegisterType((*ReadDendaByKeteranganReq)(nil), "grpc.ReadDendaByKeteranganReq")
	proto.RegisterType((*ReadDendaByKeteranganResp)(nil), "grpc.ReadDendaByKeteranganResp")
	proto.RegisterType((*UpdateDendaReq)(nil), "grpc.UpdateDendaReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for DendaService service

type DendaServiceClient interface {
	AddDenda(ctx context.Context, in *AddDendaReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ReadDendaByID(ctx context.Context, in *ReadDendaByIDReq, opts ...grpc1.CallOption) (*ReadDendaByIDResp, error)
	ReadDenda(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadDendaResp, error)
	ReadDendaByKeterangan(ctx context.Context, in *ReadDendaByKeteranganReq, opts ...grpc1.CallOption) (*ReadDendaByKeteranganResp, error)
	UpdateDenda(ctx context.Context, in *UpdateDendaReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
}

type dendaServiceClient struct {
	cc *grpc1.ClientConn
}

func NewDendaServiceClient(cc *grpc1.ClientConn) DendaServiceClient {
	return &dendaServiceClient{cc}
}

func (c *dendaServiceClient) AddDenda(ctx context.Context, in *AddDendaReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.DendaService/AddDenda", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dendaServiceClient) ReadDendaByID(ctx context.Context, in *ReadDendaByIDReq, opts ...grpc1.CallOption) (*ReadDendaByIDResp, error) {
	out := new(ReadDendaByIDResp)
	err := grpc1.Invoke(ctx, "/grpc.DendaService/ReadDendaByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dendaServiceClient) ReadDenda(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadDendaResp, error) {
	out := new(ReadDendaResp)
	err := grpc1.Invoke(ctx, "/grpc.DendaService/ReadDenda", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dendaServiceClient) ReadDendaByKeterangan(ctx context.Context, in *ReadDendaByKeteranganReq, opts ...grpc1.CallOption) (*ReadDendaByKeteranganResp, error) {
	out := new(ReadDendaByKeteranganResp)
	err := grpc1.Invoke(ctx, "/grpc.DendaService/ReadDendaByKeterangan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dendaServiceClient) UpdateDenda(ctx context.Context, in *UpdateDendaReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.DendaService/UpdateDenda", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DendaService service

type DendaServiceServer interface {
	AddDenda(context.Context, *AddDendaReq) (*google_protobuf.Empty, error)
	ReadDendaByID(context.Context, *ReadDendaByIDReq) (*ReadDendaByIDResp, error)
	ReadDenda(context.Context, *google_protobuf.Empty) (*ReadDendaResp, error)
	ReadDendaByKeterangan(context.Context, *ReadDendaByKeteranganReq) (*ReadDendaByKeteranganResp, error)
	UpdateDenda(context.Context, *UpdateDendaReq) (*google_protobuf.Empty, error)
}

func RegisterDendaServiceServer(s *grpc1.Server, srv DendaServiceServer) {
	s.RegisterService(&_DendaService_serviceDesc, srv)
}

func _DendaService_AddDenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDendaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DendaServiceServer).AddDenda(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DendaService/AddDenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DendaServiceServer).AddDenda(ctx, req.(*AddDendaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DendaService_ReadDendaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDendaByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DendaServiceServer).ReadDendaByID(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DendaService/ReadDendaByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DendaServiceServer).ReadDendaByID(ctx, req.(*ReadDendaByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DendaService_ReadDenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DendaServiceServer).ReadDenda(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DendaService/ReadDenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DendaServiceServer).ReadDenda(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DendaService_ReadDendaByKeterangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDendaByKeteranganReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DendaServiceServer).ReadDendaByKeterangan(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DendaService/ReadDendaByKeterangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DendaServiceServer).ReadDendaByKeterangan(ctx, req.(*ReadDendaByKeteranganReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DendaService_UpdateDenda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDendaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DendaServiceServer).UpdateDenda(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DendaService/UpdateDenda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DendaServiceServer).UpdateDenda(ctx, req.(*UpdateDendaReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DendaService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.DendaService",
	HandlerType: (*DendaServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "AddDenda",
			Handler:    _DendaService_AddDenda_Handler,
		},
		{
			MethodName: "ReadDendaByID",
			Handler:    _DendaService_ReadDendaByID_Handler,
		},
		{
			MethodName: "ReadDenda",
			Handler:    _DendaService_ReadDenda_Handler,
		},
		{
			MethodName: "ReadDendaByKeterangan",
			Handler:    _DendaService_ReadDendaByKeterangan_Handler,
		},
		{
			MethodName: "UpdateDenda",
			Handler:    _DendaService_UpdateDenda_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "denda.proto",
}

func init() { proto.RegisterFile("denda.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x10, 0x65, 0xcd, 0x87, 0x60, 0xdc, 0xa2, 0xb2, 0xa5, 0xd4, 0x75, 0x2b, 0x8a, 0xf6, 0xc4, 0xc9,
	0x48, 0x70, 0xa8, 0x84, 0xd4, 0x43, 0xa9, 0x7b, 0x80, 0x5e, 0x22, 0xa3, 0x5c, 0x72, 0x5b, 0xf0,
	0xc6, 0x41, 0x31, 0xb6, 0x31, 0x4b, 0x24, 0x8e, 0x91, 0xf2, 0x5f, 0xf2, 0xbf, 0xf2, 0x4b, 0x22,
	0xef, 0x1a, 0x63, 0x1b, 0x1c, 0xe5, 0xc2, 0x71, 0xde, 0xce, 0xdb, 0x79, 0x33, 0xef, 0x81, 0x6a,
	0x33, 0xcf, 0xa6, 0x46, 0x10, 0xfa, 0xdc, 0xc7, 0x15, 0x27, 0x0c, 0x96, 0xfa, 0x77, 0xc7, 0xf7,
	0x1d, 0x97, 0x0d, 0x04, 0xb6, 0xd8, 0xdd, 0x0e, 0xd8, 0x3a, 0xe0, 0x7b, 0xd9, 0x42, 0x1e, 0x11,
	0xa8, 0x7f, 0x6c, 0xdb, 0x8c, 0x58, 0x16, 0xdb, 0xe0, 0x26, 0x28, 0x53, 0x53, 0x43, 0x3d, 0xd4,
	0x6f, 0x58, 0xca, 0xd4, 0xc4, 0x6d, 0xa8, 0xce, 0x98, 0xb7, 0xda, 0x6a, 0x8a, 0x80, 0x64, 0x81,
	0x3b, 0x50, 0x9b, 0xed, 0xd6, 0x2e, 0xbd, 0xd3, 0xca, 0x02, 0x8e, 0xab, 0x08, 0x9f, 0x73, 0xca,
	0x77, 0x5b, 0xad, 0xd2, 0x43, 0xfd, 0xaa, 0x15, 0x57, 0xf8, 0x07, 0x34, 0xfe, 0x86, 0x8c, 0x72,
	0x66, 0x4f, 0xf6, 0x5a, 0x55, 0x50, 0x8e, 0x00, 0x21, 0xf0, 0xc9, 0x62, 0x54, 0x6a, 0x98, 0xec,
	0xa7, 0xe6, 0x19, 0x1d, 0xe4, 0x19, 0x41, 0x2b, 0xd7, 0xb4, 0x0d, 0x2e, 0xa4, 0xb6, 0x0b, 0xf0,
	0x9f, 0x71, 0x16, 0x52, 0xcf, 0xa1, 0x5e, 0x2c, 0x37, 0x85, 0x64, 0xb7, 0xa9, 0xe5, 0xb7, 0x31,
	0xe1, 0x63, 0x22, 0x54, 0x88, 0x1c, 0x41, 0x9d, 0xba, 0xae, 0xa8, 0x35, 0xd4, 0x2b, 0xf7, 0xd5,
	0xe1, 0x57, 0x23, 0x32, 0xc6, 0x38, 0xd9, 0xc7, 0x4a, 0x1a, 0xc9, 0x18, 0xb4, 0xd4, 0xf3, 0x71,
	0x78, 0x74, 0x9b, 0xac, 0x3e, 0x94, 0xd7, 0x47, 0xae, 0xe0, 0x5b, 0x01, 0x57, 0xaa, 0xb9, 0x67,
	0xfc, 0x7d, 0x6a, 0x0e, 0x8d, 0xe4, 0x09, 0x41, 0xf3, 0x3a, 0xb0, 0x29, 0x67, 0x97, 0x0f, 0x8a,
	0x9c, 0x93, 0x0a, 0x4a, 0x02, 0x0c, 0x5f, 0x14, 0xf8, 0x20, 0x04, 0xcc, 0x59, 0xf8, 0xb0, 0x5a,
	0x32, 0xfc, 0x0b, 0xea, 0x87, 0xf0, 0xe2, 0x96, 0x5c, 0x23, 0x15, 0x66, 0xbd, 0x63, 0xc8, 0xe8,
	0x1b, 0x87, 0xe8, 0x1b, 0xff, 0xa2, 0xe8, 0x93, 0x12, 0x9e, 0xa4, 0x4c, 0x8a, 0xf6, 0xc5, 0x9d,
	0xb3, 0x47, 0xd8, 0xe8, 0x45, 0xc7, 0x21, 0x25, 0x3c, 0x86, 0x46, 0x02, 0xe3, 0x82, 0x51, 0xfa,
	0xe7, 0x1c, 0x3f, 0xe6, 0xde, 0xc0, 0x97, 0xb3, 0x16, 0xe1, 0xee, 0xc9, 0xbc, 0x8c, 0xf7, 0xfa,
	0xcf, 0x37, 0xdf, 0xc5, 0xdf, 0xbf, 0x41, 0x4d, 0x79, 0x85, 0xdb, 0x92, 0x91, 0xb5, 0xaf, 0xf8,
	0x34, 0x8b, 0x9a, 0x40, 0x46, 0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0x38, 0xd5, 0x6e, 0x4a,
	0x04, 0x00, 0x00,
}
